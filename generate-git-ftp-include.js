// @ts-check
/**
 * @fileoverview Correctly map files in publish workflow.
 *
 * Runs as build post-processing operation.
 *
 * SamKirkland/FTP-Deploy-Action publish action will not delete untracked files on the server, unless correctly mapped in the ".git-ftp-include" file.
 * Need to auto-generate this, mapping "src" and "static" files to "dist" files, as generated by Parcel.
 *
 * 1. (external) Using *parcel-plugin-bundle-manifest* to generate a JSON manifest.
 * 2. Then transpose this content into the .git-ftp-include file.
 * 3. Then erase the "parcel-manifest.json" file.
 *
 * @see https://github.com/jamiegluk/jamiegl/issues/30
 */

// Filename constants
const DIST = "dist";
const STATIC = "static";
const BUNDLE = "dist/bundle";
const PARCEL_MANIFEST = "parcel-manifest.json";
const GIT_FTP_INCLUDE = ".git-ftp-include";

// Imports
const glob = require("glob");
const fs = require("fs");

// Read parcel-manifest.json as object

/** @type {{ [key: string]: string }} */
let manifest;
try {
  manifest = require(`./${DIST}/${PARCEL_MANIFEST}`);
} catch {}

if (!manifest) {
  if (process.argv.some((a) => a === "--maybe")) {
    console.log(`‚è© ${PARCEL_MANIFEST} does not exist, skipping`);
    process.exit(0);
  } else {
    throw new Error(`${PARCEL_MANIFEST} file required`);
  }
}

// Convert into .git-ftp-include format
// See https://github.com/SamKirkland/FTP-Deploy-Action#upload-css-file-compiled-from-an-scss-file

let transformed = "";

for (const kSrcPath of Object.keys(manifest)) {
  /** @type string -- Value is a url */
  let vUrlRaw = manifest[kSrcPath];
  // We don't want back-slashes, why are they even present, Windows maybe ?!
  vUrlRaw = vUrlRaw.replace("\\", "/");
  // `yarn start` gives us a "\\filename.ext" value, whereas `yarn build` gives us a full web URL.
  /** @type string */
  let pathname;
  try {
    // URL.pathname always has a leading slash
    pathname = new URL(vUrlRaw).pathname;
  } catch {
    if (!vUrlRaw.startsWith("/")) {
      throw new Error(
        `Unexpected dist path value in ${PARCEL_MANIFEST}: "${vUrlRaw}"`
      );
    }
    pathname = vUrlRaw;
  }
  // Convert it to a local path
  let distPath = DIST + pathname;

  // It might not exist there, as parcel-plugin-custom-dist-structure puts it in a different place
  if (!fs.existsSync("./" + distPath)) {
    const fileName = distPath.split("/").pop();
    const files = glob.sync("**/" + fileName, { cwd: "./" + BUNDLE });

    if (files.length === 0) {
      throw new Error(`Found no bundled file match for: "${fileName}"`);
    }
    if (files.length > 1) {
      throw new Error(
        `Found more than one bundled file match for: "${fileName}"`
      );
    }
    distPath = BUNDLE + "/" + files[0];
  }

  transformed += `${distPath}:${kSrcPath}`;
  transformed += "\n";
}

if (!transformed) {
  throw new Error("No files were mapped");
}

// Map static files
const staticFiles = glob.sync("**/*", { cwd: "./" + STATIC });
for (const f of staticFiles) {
  const staticPath = STATIC + "/" + f;
  const distPath = DIST + "/" + f;
  transformed += `${distPath}:${staticPath}`;
  transformed += "\n";
}

// Write to .git-ftp-include
fs.writeFileSync("./" + GIT_FTP_INCLUDE, transformed);

// Delete parcel-manifest.json
fs.unlinkSync(`./${DIST}/${PARCEL_MANIFEST}`);

// Log
const count = transformed.split("\n").length - 1;
console.log(
  `üìù Mapped ${count} files to ${GIT_FTP_INCLUDE} and deleted ${PARCEL_MANIFEST}`
);
